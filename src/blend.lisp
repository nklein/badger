
(cl:in-package #:badger)

(declaim (inline alpha-blend))
(defun alpha-blend (a b p)
  (values (round (+ (* a p) (* b (- 255 p))) 255)))

(defun blend-images (a-type a b-type b &key (x-offset 0) (y-offset 0))
  (let* ((ww (width b-type b))
         (hh (height b-type b))
         (img (make-jpeg-image ww hh 3)))
    (dotimes (yy hh (values img 'jpeg-image))
      (dotimes (xx ww)
        (let ((xa (- xx x-offset))
              (ya (- yy y-offset)))
          (let ((ra (pixel a-type a xa ya 0))
                (ga (pixel a-type a xa ya 1))
                (ba (pixel a-type a xa ya 2))
                (rb (pixel b-type b xx yy 0))
                (gb (pixel b-type b xx yy 1))
                (bb (pixel b-type b xx yy 2))
                (ab (pixel b-type b xx yy 3)))
            (let ((ri (clamp (alpha-blend rb ra ab) 256))
                  (gi (clamp (alpha-blend gb ga ab) 256))
                  (bi (clamp (alpha-blend bb ba ab) 256)))
              (set-pixel jpeg-image ri img xx yy 0)
              (set-pixel jpeg-image gi img xx yy 1)
              (set-pixel jpeg-image bi img xx yy 2))))))))
